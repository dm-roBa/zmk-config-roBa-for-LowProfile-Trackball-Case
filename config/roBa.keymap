#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// #includeのあとのあたりにスクロール量を変更

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    // automouse-layer = <4>;

    scroll-layers = <5>;

    arrows {
        layers = <9>;
        bindings =
            <&kp RIGHT_ARROW>,
            <&kp LEFT_ARROW>,
            <&kp UP_ARROW>,
            <&kp DOWN_ARROW>;

        tick = <10>;
        wait-ms = <5>;
        tap-ms = <5>;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        quote {
            bindings = <&kp SQT>;
            key-positions = <19 20>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <19 18>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        ps1: ps1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(R) &kp L &kp V &kp D &kp N0 &kp N3 &kp N2 &kp N1>;
            label = "TEST";
        };

        ps2: ps2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(R) &kp L &kp V &kp D &kp N0 &kp N3 &kp N2 &kp N2>;
            label = "PS2";
        };

        ps3: ps3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(R) &kp L &kp V &kp D &kp N0 &kp N3 &kp N2 &kp N3>;
            label = "PS3";
        };

        ps4: ps4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp R &kp L &kp V &kp D &kp N0 &kp N3 &kp N2 &kp N2>;
            label = "PS4";
        };

        ctrl_d: ctrl_d {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(END) &kp LC(X)>;
            label = "CTRL_D";
        };

        line_copy: line_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME) &kp LC(C) &kp ESC>;
            label = "LINE_COPY";
        };

        jugyoin: jugyoin {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp N5 &kp N7 &kp N0 &kp N4 &kp N8 &kp N9>;
            label = "JUGYOIN";
        };

        sleep: sleep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp U &kp S>;
            label = "SLEEP";
            wait-ms = <100>;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        sensor_scroll_mouse: sensor_scroll_mouse {
            compatible = "zmk,behavior-sensor-rotate";
            label = "SENSOR_SCROLL_MOUSE";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ALT_TAB";
            #sensor-binding-cells = <0>;
            bindings = <&kp LA(TAB)>, <&kp LA(LS(TAB))>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                       &kp T                                             &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&lt 10 A          &kp S         &kp D         &kp F                       &kp G      &kp LS(LG(S))        &kp TILDE         &kp H        &kp J  &kp K      &kp L    &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                       &kp B      &kp TAB              &kp GRAVE         &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 9 LS(SPACE)  &kp SPACE  &lt 8 LS(SPACE)      &lt 11 BACKSPACE  &lt 7 ENTER                             &lt 6 DELETE
            >;

            // sensor-bindings = <&sensor_scroll_mouse>;

            sensor-bindings = <&sensor_scroll_mouse>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BT {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans          &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &bt BT_CLR_ALL  &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                    &trans
            >;
        };

        NUMFUNCTION {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4     &kp F5                            &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&kp N1  &kp N2  &kp N3  &kp N4     &kp N5    &trans         &trans   &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
&trans  &trans  &trans  &trans     &trans    &kp F11        &kp F12  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp MINUS  &kp PLUS  &kp EQUAL      &trans   &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        SIMBOL {
            bindings = <
&ps1             &ps2         &ps3      &ps4        &jugyoin                                   &kp GRAVE          &trans         &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &trans
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp Y       &kp TILDE         &kp CARET          &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans           &trans       &trans    &trans      &trans       &trans      &kp PIPE          &kp BACKSLASH      &trans         &kp LEFT_BRACE    &kp RIGHT_BRACE       &trans
&trans           &trans       &trans    &trans      &trans       &trans      &kp LG(LC(LEFT))  &kp LG(LC(RIGHT))                                                         &kp LC(LG(D))
            >;

            sensor-bindings = <&inc_dec_kp LS(LEFT) LS(RIGHT)>;
        };

        MACRO-ARROW {
            bindings = <
&kp ESCAPE   &trans         &trans       &kp LG(R)               &trans                                      &kp LG(TAB)  &kp LC(Y)       &kp UP_ARROW    &kp LC(Z)        &trans
&kp LA(TAB)  &kp LS(LG(S))  &kp LS(F12)  &kp LS(LA(DOWN_ARROW))  &kp LA(LS(UP_ARROW))  &trans      &trans    &kp HOME     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END
&trans       &trans         &line_copy   &kp LS(LA(MINUS))       &kp LA(PLUS)          &trans      &trans    &trans       &trans          &trans          &kp LC(LS(L))    &trans
&trans       &trans         &trans       &trans                  &trans                &trans      &mkp MB5  &mkp MB4                                                      &sleep
            >;

            sensor-bindings = <&alt_tab>;
        };

        EMACS {
            bindings = <
&kp LC(F)  &kp LC(X)  &kp END     &trans     &kp LC(C)                                     &kp LC(V)         &trans  &kp LC(I)  &trans     &kp UP_ARROW
&trans     &kp HOME   &kp DELETE  &kp RIGHT  &kp ESC         &trans      &trans            &kp BACKSPACE     &trans  &ctrl_d    &kp LC(L)  &kp LC(SEMICOLON)
&trans     &trans     &trans      &trans     &kp LEFT        &trans      &trans            &kp DOWN_ARROW    &trans  &trans     &trans     &kp LC(SLASH)
&trans     &trans     &trans      &kp LC(S)  &kt LEFT_SHIFT  &trans      &kp LC(NUMBER_1)  &kp LC(NUMBER_2)                                &trans
            >;
        };

        layer_11 {
            bindings = <
&trans     &trans  &trans  &trans     &trans                      &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &trans  &trans  &trans     &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans     &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &kp TILDE  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
